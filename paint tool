package MyPaintApp;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JComponent;

public class DrawingBoard extends PaintAppMain{
	
	ArrayList<Shape> shapes = new ArrayList<Shape>();
	ArrayList<Color> shapeFill = new ArrayList<Color>();
	ArrayList<Color> shapesStroke = new ArrayList<Color>();
	Point drawStart, drawEnd;
	
	public DrawingBoard() {
		
		this.addMouseListener(new MouseAdapter(){
			
			public void mousePressed(MouseEvent e) {
			drawStart = new Point(e.getX(), e.getY());
			drawEnd = drawStart;
			repaint();
		}
			public void mousseReleased(MouseEvent e) {
				
				Shape aShape = drawRectangle(drawStart.x, drawStart.y, e.getX(),e.getY());
				
				shapes.add(aShape);
				shapeFill.add(fillColor);
				shapeStroke.add(strokeColor);
				
				drawStart = null;
				drawEnd = null;
				repaint();
			}
		
	});// end of addmouselistener
		
		this.addMouseListener(New MouseMotionAdapter(){
			
			public void mouseDragged(MouseEvent e) {
				
				drawEnd = Point(e.getX(), e.getY());
		}

			private Point Point(int x, int y) {
				// TODO Auto-generated method stub
				return null;
			}
				
		});
	}
	public void paint(Graphics g) {
		
		Graphics2D graphSettings = (Graphics2D)g;
		
		graphSetting.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		graphSettings.setStroke(new BasicStroke(2));
		
		Iterator<Color> strokeCounter = shapeStroke.iterator();
		Iterator<Color> fillCounter = shapeFill.iterator();
		
		graphSettings.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
		
		for(Shape s: shapes) {
			
			graphSettings.setPaint(strokeCounter.next());
			graphSettings.draw(s);
			graphSettings.setPaint(fillCounter.next());
			graphSettings.fill(s);
		}
		
		if(drawStart != null && drawEnd != null) {
			
			graphSettings.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.4f));
			
			graphSettings.setPaint(Color.GRAY);
			
			Shape aShape = drawRectangle(drawStart.x, drawStart.y, drawEnd.x, drawEnd.y);

		}
	}
	
	private Rectangle2D.Float drawRectangle(int x1, int y1, int x2, int y2){
		
		int x = Math.min(x1, x2);
		int y = Math.min(y1, y2);
		
		int width = Math.abs(x1-x2);
		int height = Math.abs(x1-x2);
	}
}
